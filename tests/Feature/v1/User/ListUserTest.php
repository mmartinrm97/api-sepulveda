<?php

namespace Tests\Feature\v1\User;

use App\Models\Role;
use App\Models\User;
use App\Models\Warehouse;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\Traits\AssertModelJsonDataTrait;
use Tests\Traits\FactorySeedModelDataTrait;

class ListUserTest extends TestCase
{
    use RefreshDatabase, AssertModelJsonDataTrait, FactorySeedModelDataTrait;

    //Initialize structure json to assert
    protected array $arrayData = ['data' => []];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Role::factory(2)->create();
    }

    /** @test */
    public function can_fetch_all_users()
    {
        $users = User::factory(3)->create();

        $response = $this->getJson(route('api.v1.users.index'));

        $this->arrayData['data'] = $this->userJsonData($users);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }

    /** @test */
    public function can_fetch_all_users_with_role()
    {
        $users = User::factory(3)->create();
        $users->load('role');

        $response = $this->getJson(route('api.v1.users.index', [
            'include' => 'role'
        ]));

        $this->arrayData['data'] = $this->userJsonData($users);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }

    /** @test */
    public function can_fetch_all_users_with_warehouses()
    {
        $users = User::factory(3)->create();

        Warehouse::factory(3)->create()->each(function($warehouse) use ($users){
            $this->usersWarehouse($users, $warehouse);
        });

        $users->load('warehouses');

        $response = $this->getJson(route('api.v1.users.index', [
            'include' => 'warehouses'
        ]));

        $this->arrayData['data'] = $this->userJsonData($users);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }

    /** @test */
    public function can_fetch_a_single_user()
    {
        $user = User::factory()->create();

        $response = $this->getJson(route('api.v1.users.show', $user));

        $this->arrayData['data'] = $this->userJsonData($user);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }

    /** @test */
    public function can_fetch_a_single_user_with_role()
    {
        $user = User::factory()->create();
        $user->load('role');

        $response = $this->getJson(route('api.v1.users.show',  [
            'include' => 'role',
            'user' => $user
        ]));

        $this->arrayData['data'] = $this->userJsonData($user);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }

    /** @test */
    public function can_fetch_a_single_user_with_warehouses()
    {
        $user = User::factory()->create();

        Warehouse::factory(3)->create()->each(function($warehouse) use ($user){
            $this->usersWarehouse($user, $warehouse);
        });

        $response = $this->getJson(route('api.v1.users.show',  [
            'include' => 'warehouses',
            'user' => $user
        ]));

        $user->load('warehouses');

        $this->arrayData['data'] = $this->userJsonData($user);

        $response
            ->assertExactJson($this->arrayData)
            ->assertSuccessful();
    }
}
